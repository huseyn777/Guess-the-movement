module RandomGenerator(input clk,start,
input [1:0] direction,
input [1:0] rotaton_duration,
output [3:0]randomValue
);

logic [15:0] Q = 16'b1010_1100_1110_0001;
logic [15:0] D;
logic [3:0] temp;

always@ (posedge clk)      
    begin       
       if(start)
            begin
            temp[3] <= Q[3];
            temp[2] <= Q[2];
            temp[1] <= Q[1];
            temp[0] <= Q[0];
            end
        else Q <= D;
                       
    end            
    
assign D[15] = (((Q[0] ^ Q[2]) ^ Q[3]) ^Q[5]);
assign D[14] = Q[15]; 
assign D[13] = Q[14];
assign D[12] = Q[13]; 
assign D[11] = Q[12]; 
assign D[10] = Q[11]; 
assign D[9] = Q[10]; 
assign D[8] = Q[9]; 
assign D[7] = Q[8]; 
assign D[6] = Q[7]; 
assign D[5] = Q[6]; 
assign D[4] = Q[5]; 
assign D[3] = Q[4];
assign D[2] = Q[3]; 
assign D[1] = Q[2]; 
assign D[0] = Q[1];           
      
assign randomValue = temp;
assign direction = {temp[1],temp[3]};
assign rotaton_duration ={temp[0],temp[2]} ;

endmodule





module Top(input clk,reset,
input [3:0] keyb_col,
output a, b, c, d, e, f, g, dp,
output [3:0] an,
output [3:0] keyb_row,
output [3:0] phases
);

logic [27:0] counter = 28'b0000_0000_0000_0000_0000_0000_0000;
logic delay = 1'b0; 
logic start;
logic enable = 1'b0;
logic[3:0] map;
logic [1:0] direction;
logic [1:0] rotation_duration;
logic [3:0] randomValue;

RandomGenerator Generate(clk,start,direction,rotation_duration,randomValue);


steppermotor_wrapper steppermotor_wrapper_inst0(
	.clk(clk),
    .direction(direction), 
	.rotation_duration(rotation_duration), 	
	.phases(phases), 
	.start(start) 
);

logic [3:0] key_value;

keypad4X4 keypad4X4_inst0(
	.clk(clk),
	.keyb_row(keyb_row), 
	.keyb_col(keyb_col), 
    .key_value(key_value),
    .key_valid(key_valid)
);	


logic [3:0] in0 = 4'h0; 
logic [3:0] in1 = randomValue; 
logic [3:0] in2 = 4'h0; 
logic [3:0] in3 = 4'h0; 

SevSeg_4digit SevSeg_4digit_inst0(
	.clk(clk),
	.in3(in3), .in2(in2), .in1(in1), .in0(in0), 
	.a(a), .b(b), .c(c), .d(d), .e(e), .f(f), .g(g), .dp(dp), 
	.an(an)
);

always@ (posedge clk)
begin 
    start <= 1'b0;
    if(reset)
        begin 
            in0 <= 4'h0;
            start <= 1'b1;
            enable <= 1'b1;
        end         
   if(delay)
        begin
            counter <= counter + 28'b0000_0000_0000_0000_0000_0000_0001;
            if(counter == 28'b1011_1110_1011_1100_0010_0000_0000)
                begin
                    start <= 1'b1;
                    delay <= 1'b0;
                    counter <= 28'b0000_0000_0000_0000_0000_0000_0000;
                end
        end
   
     if ((key_valid == 1'b1) & (enable == 1'b1)) begin
	
       delay = 1'b1;  	
	   case(key_value) 
	   4'b00_00:  
	       map = 4'b0001;

	   4'b00_01: 
	       map = 4'b0010;

	   4'b00_10:  
		  map = 4'b0011;

	   4'b00_11:  
		  map = 4'b0100;
		

	   4'b01_00:  
		  map = 4'b0101;
	
		
	   4'b01_01:  
		  map = 4'b0110;

		
	   4'b01_10:  
		  map = 4'b0111;

		
	   4'b01_11:  
		  map = 4'b1000;
		
		
	   4'b10_00:  
		  map = 4'b1001;


	   4'b10_01:  
		  map = 4'b1010;


	   4'b10_10: 
		  map = 4'b1011;


	   4'b10_11: 
		  map = 4'b1100;
	
		
	   4'b11_00:  
		  map = 4'b1101;


	   4'b11_01:  
		  map = 4'b1110;
	

	   4'b11_10:  
		  map = 4'b1111;


	   4'b11_11: 
		  map = 4'b0000	;		
	   endcase
	   
	   begin
	       if(map == randomValue)
	           if(in0 < 4'h9)
	               in0 <= in0 + 4'd1;
	           else
	               in0 <= 4'd9;
            else
                if(in0 > 4'h0)
                    in0 <= in0 - 4'd1;
	           else
	                in0 <= 4'd0;            
        end	
    end
end                   

endmodule





#------------------------------------------------------------
#---------------------- Clock signal ------------------------
#------------------------------------------------------------
set_property PACKAGE_PIN W5 [get_ports clk]  	 	 	 	  
set_property IOSTANDARD LVCMOS33 [get_ports clk] 
create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk] 



#------------------------------------------------------------
#-------------------- 7 segment display ---------------------
#------------------------------------------------------------
set_property PACKAGE_PIN W7 [get_ports {a}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {a}] 
set_property PACKAGE_PIN W6 [get_ports {b}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {b}] 
set_property PACKAGE_PIN U8 [get_ports {c}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {c}] 
set_property PACKAGE_PIN V8 [get_ports {d}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {d}] 
set_property PACKAGE_PIN U5 [get_ports {e}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {e}] 
set_property PACKAGE_PIN V5 [get_ports {f}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {f}] 
set_property PACKAGE_PIN U7 [get_ports {g}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {g}] 
set_property PACKAGE_PIN V7 [get_ports dp]  	 	 	 	  
 	set_property IOSTANDARD LVCMOS33 [get_ports dp] 
	
set_property PACKAGE_PIN U2 [get_ports {an[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}] 
set_property PACKAGE_PIN U4 [get_ports {an[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}] 
set_property PACKAGE_PIN V4 [get_ports {an[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}] 
set_property PACKAGE_PIN W4 [get_ports {an[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}] 

	
#------------------------------------------------------------
#---------------------- keyboard matrix ---------------------
#------------------------------------------------------------	
set_property PACKAGE_PIN A15 [get_ports {keyb_row[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_row[0]}] 
set_property PACKAGE_PIN A17 [get_ports {keyb_row[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_row[1]}] 
set_property PACKAGE_PIN C15 [get_ports {keyb_row[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_row[2]}] 
set_property PACKAGE_PIN C16 [get_ports {keyb_row[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_row[3]}] 

set_property PACKAGE_PIN A14 [get_ports {keyb_col[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_col[0]}] 
set_property PACKAGE_PIN A16 [get_ports {keyb_col[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_col[1]}] 
set_property PACKAGE_PIN B15 [get_ports {keyb_col[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_col[2]}] 
set_property PACKAGE_PIN B16 [get_ports {keyb_col[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD  LVCMOS33 [get_ports {keyb_col[3]}] 
 	
 	
#------------------------------------------------------------
#---------------------- Stepper motor -----------------------
#------------------------------------------------------------    
    
#4 phases
#step motor: Bb
set_property PACKAGE_PIN P18 [get_ports {phases[0]}]                    
          set_property IOSTANDARD  LVCMOS33 [get_ports {phases[0]}] 
#step motor: Ab
set_property PACKAGE_PIN N17 [get_ports {phases[1]}]                          
          set_property IOSTANDARD  LVCMOS33 [get_ports {phases[1]}] 
#step motor: B
set_property PACKAGE_PIN M18 [get_ports {phases[2]}]                          
          set_property IOSTANDARD  LVCMOS33 [get_ports {phases[2]}] 
#step motor: A
set_property PACKAGE_PIN K17 [get_ports {phases[3]}]                          
          set_property IOSTANDARD  LVCMOS33 [get_ports {phases[3]}] 
#reset    
set_property PACKAGE_PIN U18 [get_ports {reset}]                          
          set_property IOSTANDARD  LVCMOS33 [get_ports {reset}] 











